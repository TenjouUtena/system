// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SystemGame.Api.Contexts;

#nullable disable

namespace SystemGame.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251031170238_20251031164949_Phase7SpaceshipsAndShipyards")]
    partial class _20251031164949_Phase7SpaceshipsAndShipyards
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BehaviorConfig")
                        .HasColumnType("text");

                    b.Property<int?>("BuilderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentBehaviorName")
                        .HasColumnType("text");

                    b.Property<int?>("CurrentPlanetId")
                        .HasColumnType("integer");

                    b.Property<int?>("CurrentSystemId")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastExecutionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("PositionX")
                        .HasColumnType("double precision");

                    b.Property<double?>("PositionY")
                        .HasColumnType("double precision");

                    b.Property<int?>("SpaceshipId")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuilderId");

                    b.HasIndex("CurrentPlanetId");

                    b.HasIndex("CurrentSystemId");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("State");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.AgentLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgentId", "Timestamp");

                    b.ToTable("AgentLogs");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Builder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedBuildingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlanetId")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssignedBuildingId");

                    b.HasIndex("PlanetId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Builders");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ConstructionCompleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ConstructionProgress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("ConstructionStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GridSquareId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GridSquareId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Buildings", t =>
                        {
                            t.HasCheckConstraint("CK_Building_ProgressRange", "\"ConstructionProgress\" >= 0 AND \"ConstructionProgress\" <= 100");
                        });
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Galaxy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("SystemCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.ToTable("Galaxies");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.GridSquare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("CopperAmount")
                        .HasColumnType("double precision");

                    b.Property<double?>("FuelAmount")
                        .HasColumnType("double precision");

                    b.Property<double?>("IronAmount")
                        .HasColumnType("double precision");

                    b.Property<int>("PlanetGridId")
                        .HasColumnType("integer");

                    b.Property<double?>("SoilAmount")
                        .HasColumnType("double precision");

                    b.Property<int>("X")
                        .HasColumnType("integer");

                    b.Property<int>("Y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlanetGridId", "X", "Y")
                        .IsUnique();

                    b.ToTable("GridSquares");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Planet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Size")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(5);

                    b.Property<int>("SystemId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SystemId");

                    b.ToTable("Planets");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.PlanetGrid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("PlanetId")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId")
                        .IsUnique();

                    b.ToTable("PlanetGrids");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.PlayerGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId", "GameId")
                        .IsUnique();

                    b.ToTable("PlayerGames");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Shipyard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxConcurrentBuilds")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SpaceStationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SpaceStationId");

                    b.ToTable("Shipyards");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.SpaceStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("CopperAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("FuelAmount")
                        .HasColumnType("double precision");

                    b.Property<double>("IronAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("SoilAmount")
                        .HasColumnType("double precision");

                    b.Property<int>("SystemId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SystemId");

                    b.ToTable("SpaceStations");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Spaceship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Attack")
                        .HasColumnType("integer");

                    b.Property<int>("CargoCapacity")
                        .HasColumnType("integer");

                    b.Property<int?>("CargoCopper")
                        .HasColumnType("integer");

                    b.Property<int?>("CargoFuel")
                        .HasColumnType("integer");

                    b.Property<int?>("CargoIron")
                        .HasColumnType("integer");

                    b.Property<int?>("CargoSoil")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ConstructionCompletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("ConstructionProgress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime?>("ConstructionStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ConstructionTimeSeconds")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentSystemId")
                        .HasColumnType("integer");

                    b.Property<int>("Defense")
                        .HasColumnType("integer");

                    b.Property<int?>("DestinationSystemId")
                        .HasColumnType("integer");

                    b.Property<double?>("DestinationX")
                        .HasColumnType("double precision");

                    b.Property<double?>("DestinationY")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("EstimatedArrivalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("Health")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("MovementStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("PositionX")
                        .HasColumnType("double precision");

                    b.Property<double>("PositionY")
                        .HasColumnType("double precision");

                    b.Property<int?>("ShipyardId")
                        .HasColumnType("integer");

                    b.Property<double>("Speed")
                        .HasColumnType("double precision");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrentSystemId");

                    b.HasIndex("DestinationSystemId");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ShipyardId");

                    b.HasIndex("State");

                    b.ToTable("Spaceships", t =>
                        {
                            t.HasCheckConstraint("CK_Spaceship_ProgressRange", "\"ConstructionProgress\" >= 0 AND \"ConstructionProgress\" <= 100");
                        });
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.StarSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GalaxyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("X")
                        .HasColumnType("integer");

                    b.Property<int>("Y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GalaxyId", "X", "Y")
                        .IsUnique();

                    b.ToTable("StarSystems");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Wormhole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("SystemAId")
                        .HasColumnType("integer");

                    b.Property<int>("SystemBId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SystemAId");

                    b.HasIndex("SystemBId");

                    b.ToTable("Wormholes", t =>
                        {
                            t.HasCheckConstraint("CK_Wormhole_DifferentSystems", "\"SystemAId\" != \"SystemBId\"");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SystemGame.Api.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SystemGame.Api.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemGame.Api.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SystemGame.Api.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Agent", b =>
                {
                    b.HasOne("SystemGame.Api.Data.Entities.Builder", "Builder")
                        .WithMany()
                        .HasForeignKey("BuilderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SystemGame.Api.Data.Entities.Planet", "CurrentPlanet")
                        .WithMany()
                        .HasForeignKey("CurrentPlanetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SystemGame.Api.Data.Entities.StarSystem", "CurrentSystem")
                        .WithMany()
                        .HasForeignKey("CurrentSystemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SystemGame.Api.Data.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemGame.Api.Data.Entities.AppUser", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Builder");

                    b.Navigation("CurrentPlanet");

                    b.Navigation("CurrentSystem");

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.AgentLog", b =>
                {
                    b.HasOne("SystemGame.Api.Data.Entities.Agent", "Agent")
                        .WithMany("Logs")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Builder", b =>
                {
                    b.HasOne("SystemGame.Api.Data.Entities.Building", "AssignedBuilding")
                        .WithMany()
                        .HasForeignKey("AssignedBuildingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SystemGame.Api.Data.Entities.Planet", "Planet")
                        .WithMany("Builders")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemGame.Api.Data.Entities.AppUser", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedBuilding");

                    b.Navigation("Planet");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Building", b =>
                {
                    b.HasOne("SystemGame.Api.Data.Entities.GridSquare", "GridSquare")
                        .WithMany("Buildings")
                        .HasForeignKey("GridSquareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SystemGame.Api.Data.Entities.AppUser", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GridSquare");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Galaxy", b =>
                {
                    b.HasOne("SystemGame.Api.Data.Entities.Game", "Game")
                        .WithOne("Galaxy")
                        .HasForeignKey("SystemGame.Api.Data.Entities.Galaxy", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Game", b =>
                {
                    b.HasOne("SystemGame.Api.Data.Entities.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.GridSquare", b =>
                {
                    b.HasOne("SystemGame.Api.Data.Entities.PlanetGrid", "PlanetGrid")
                        .WithMany("Squares")
                        .HasForeignKey("PlanetGridId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanetGrid");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Planet", b =>
                {
                    b.HasOne("SystemGame.Api.Data.Entities.StarSystem", "StarSystem")
                        .WithMany("Planets")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StarSystem");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.PlanetGrid", b =>
                {
                    b.HasOne("SystemGame.Api.Data.Entities.Planet", "Planet")
                        .WithOne("Grid")
                        .HasForeignKey("SystemGame.Api.Data.Entities.PlanetGrid", "PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.PlayerGame", b =>
                {
                    b.HasOne("SystemGame.Api.Data.Entities.Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemGame.Api.Data.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Shipyard", b =>
                {
                    b.HasOne("SystemGame.Api.Data.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemGame.Api.Data.Entities.AppUser", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SystemGame.Api.Data.Entities.SpaceStation", "SpaceStation")
                        .WithMany()
                        .HasForeignKey("SpaceStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("SpaceStation");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.SpaceStation", b =>
                {
                    b.HasOne("SystemGame.Api.Data.Entities.AppUser", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SystemGame.Api.Data.Entities.StarSystem", "StarSystem")
                        .WithMany("SpaceStations")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("StarSystem");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Spaceship", b =>
                {
                    b.HasOne("SystemGame.Api.Data.Entities.StarSystem", "CurrentSystem")
                        .WithMany()
                        .HasForeignKey("CurrentSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SystemGame.Api.Data.Entities.StarSystem", "DestinationSystem")
                        .WithMany()
                        .HasForeignKey("DestinationSystemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SystemGame.Api.Data.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemGame.Api.Data.Entities.AppUser", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SystemGame.Api.Data.Entities.Shipyard", "Shipyard")
                        .WithMany("Spaceships")
                        .HasForeignKey("ShipyardId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentSystem");

                    b.Navigation("DestinationSystem");

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("Shipyard");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.StarSystem", b =>
                {
                    b.HasOne("SystemGame.Api.Data.Entities.Galaxy", "Galaxy")
                        .WithMany("Systems")
                        .HasForeignKey("GalaxyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Galaxy");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Wormhole", b =>
                {
                    b.HasOne("SystemGame.Api.Data.Entities.StarSystem", "SystemA")
                        .WithMany("WormholeAConnections")
                        .HasForeignKey("SystemAId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SystemGame.Api.Data.Entities.StarSystem", "SystemB")
                        .WithMany("WormholeBConnections")
                        .HasForeignKey("SystemBId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SystemA");

                    b.Navigation("SystemB");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Agent", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Galaxy", b =>
                {
                    b.Navigation("Systems");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Game", b =>
                {
                    b.Navigation("Galaxy");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.GridSquare", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Planet", b =>
                {
                    b.Navigation("Builders");

                    b.Navigation("Grid");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.PlanetGrid", b =>
                {
                    b.Navigation("Squares");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.Shipyard", b =>
                {
                    b.Navigation("Spaceships");
                });

            modelBuilder.Entity("SystemGame.Api.Data.Entities.StarSystem", b =>
                {
                    b.Navigation("Planets");

                    b.Navigation("SpaceStations");

                    b.Navigation("WormholeAConnections");

                    b.Navigation("WormholeBConnections");
                });
#pragma warning restore 612, 618
        }
    }
}
